<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[页面通信/数据交换的小结]]></title>
      <url>https://chenluli.github.io/2017/03/22/2017-3-22-communicate/</url>
      <content type="html"><![CDATA[<p>页面通信方法的小结，及跨域问题的解决方法。<br><a id="more"></a></p>
<h3 id="页面间通信方法"><a href="#页面间通信方法" class="headerlink" title="页面间通信方法"></a>页面间通信方法</h3><ul>
<li>父页面对于同源的iframe和window.open(URL,name,features,replace)打开的窗口能访问其 DOM。</li>
<li>存储在浏览器中的数据，如Cookie,<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/API/DOM/Storage" target="_blank" rel="external">localStorage</a>和<a href="https://developer.mozilla.org/zh-CN/docs/IndexedDB" target="_blank" rel="external">IndexedDB</a>，以源进行分割。每个源都拥有自己单独的存储空间，一个源中的Javascript脚本不能对属于其它源的数据进行读写操作。</li>
<li>postMessage方法可以跨文档通信/通道通信。</li>
<li>Ajax请求等前后端通信方法。</li>
</ul>
<p>有些方法有着同源限制，所以主要记录一下跨域问题及解决。</p>
<h3 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h3><h4 id="判断同源的条件"><a href="#判断同源的条件" class="headerlink" title="判断同源的条件"></a>判断同源的条件</h4><ul>
<li>相同的协议</li>
<li>相同的域名（主机）</li>
<li>相同的端口号（IE例外）</li>
</ul>
<h4 id="非同源的限制"><a href="#非同源的限制" class="headerlink" title="非同源的限制"></a>非同源的限制</h4><ul>
<li>无法读取 cookie, localStorage, indexDB</li>
<li>不能获得不同源的窗口或框架的DOM（可拿到引用但访问内容受限）</li>
<li>ajax 调用无法正常接收数据</li>
</ul>
<h4 id="不受同源限制的"><a href="#不受同源限制的" class="headerlink" title="不受同源限制的"></a>不受同源限制的</h4><ul>
<li>提交表单</li>
<li>由 DOM 发起的网络请求（例如：img, script，CSS 等 DOM 元素加载资源）（能使用元素的src属性发信息，能获取静态资）</li>
</ul>
<h3 id="跨域通信方法"><a href="#跨域通信方法" class="headerlink" title="跨域通信方法"></a>跨域通信方法</h3><h4 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h4><p>脚本可以将 document.domain 的值设置为其<strong>当前域*</strong>或其<strong>当前域的超级域*</strong>。故，若主域名相同时，可通过设置domain解决跨域问题。需要注意的是：浏览器单独保存端口号。对document.domain的任何赋值操作，包括document.domain = document.domain都会以null值覆盖掉原来的端口号。赋值时必须带上端口号，以确保端口号不会为null。（若想共享cookie,也可在 response 里修改 cookie 的 domain 。）</p>
<h4 id="Web-Messaging-API"><a href="#Web-Messaging-API" class="headerlink" title="Web Messaging API"></a>Web Messaging API</h4><h5 id="message事件"><a href="#message事件" class="headerlink" title="message事件"></a>message事件</h5><p>该事件的事件对象 event 有以下5个属性：</p>
<ul>
<li><strong>event.data：</strong> 接收到的数据</li>
<li><strong>event.origin：</strong> 数据发送方的源</li>
<li><strong>event.lastEventId：</strong> 当前的消息事件的唯一标识符</li>
<li><strong>event.source：</strong> 数据发送方的窗口对象的引用</li>
<li><strong>event.ports：</strong>  发送消息的MessagePort](<a href="http://dev.w3.org/html5/postmsg/#messageport)对象" target="_blank" rel="external">http://dev.w3.org/html5/postmsg/#messageport)对象</a></li>
</ul>
<p>不支持事件冒泡；不能取消；没有默认行为。</p>
<h5 id="postMessage方法"><a href="#postMessage方法" class="headerlink" title="postMessage方法"></a>postMessage方法</h5><h5 id="跨文档通信"><a href="#跨文档通信" class="headerlink" title="跨文档通信"></a>跨文档通信</h5><p>windowObj.postMessage(message, targetOrigin, [transfer])     </p>
<p>windowObj是其他窗口的一个引用，可以是iframe 的 contentWindow 属性、执行 window.open 返回的窗口对象、或者是 window.frames等。</p>
<p>参数：message（发送的消息，可以是字符串、结构对象、数据对象、数组等）；targetOrigin（接收文档的来源）；transfer（常用于通道通信中，是一串和message 同时传递的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Transferable" target="_blank" rel="external"><code>Transferable</code></a> 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权）  </p>
<p>通过 window.postMessage，也能使不同窗口的 LocalStorage 进行交互。  </p>
<h5 id="通道通信"><a href="#通道通信" class="headerlink" title="通道通信"></a>通道通信</h5><p>多用于多源之间的通信。通道消息可以使不同浏览上下文中的代码通过端口直接通信。新建一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel" target="_blank" rel="external">MessageChannel 对象</a> ，实际上就创造了两个相关联的端口（port1,port2) ，一个端口在发送方并保持开放，另一个被传送到接收方（otherwindow/otherworker）的context。同样使用postMessage方法和onmessage事件监听。</p>
<blockquote>
<p>本节Refer: <a href="https://dev.opera.com/articles/window-postmessage-messagechannel/" target="_blank" rel="external">https://dev.opera.com/articles/window-postmessage-messagechannel/</a></p>
</blockquote>
<h4 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h4><p><code>window.name</code>属性可以存储数据（2MB左右），且无跨域限制（<code>window</code>对象没有改变的话，该 <code>window</code> 跳转的网页都能读取 <code>window.name</code> ）。需要一个代理页面。如：当页面 A 想要从另一个源获取资源，首先在自己的页面上创建一个隐藏的 iframe B（或开一个窗口），将 B 指向外部资源或服务（例如：<code>otherdomain.com/data.php</code>），B 加载完成之后，把响应的数据附加到 window.name 上。再将页面导航（location 变更）到任何一个与 A 同源的页（即代理页面），这时 A 就可以直接获取到 B 的 name 属性值。<em>缺点是需不断查询数据是否加载完。</em></p>
<h4 id="使用片段标识符"><a href="#使用片段标识符" class="headerlink" title="使用片段标识符"></a>使用片段标识符</h4><p><code>片段标识符</code>指 url 中 <code>#</code> 之后的部分，即<code>location.hash</code>。 使用片段标识符依托于以下几个关键点：</p>
<ol>
<li>改变 location.hash不会触发页面的刷新的</li>
<li>不同源的页面间虽然不能操作 iframe 中的 <code>window</code> 和 <code>dom</code>，但是可以改变 iframe 的 <code>url</code></li>
<li>window 对象可以监听 <code>hashchange</code> 事件</li>
</ol>
<p>当 A 想要向 B 发送信息时，它可以修改 B 的 hash 值。B 中的函数将轮询自身的 hash 值，找出 A 发送的是什么，然后它可以用同样的方式回复 A。如果 A 想接收这条消息，也需要轮询其本身的 hash 值。</p>
<blockquote>
<p>refer: <a href="https://www.ibm.com/developerworks/cn/web/wa-crossdomaincomm/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/web/wa-crossdomaincomm/</a> </p>
</blockquote>
<h4 id="Ajax跨域"><a href="#Ajax跨域" class="headerlink" title="Ajax跨域"></a>Ajax跨域</h4><ul>
<li><p>CORS    </p>
<p>使用自定义的HTTP头部让浏览器与服务器沟通。附加一个Origin头部。服务器也要进行相应设置。</p>
</li>
</ul>
<ul>
<li><p>JSONP    </p>
<p>动态插入<code>script</code>标签，通过<code>script</code>标签引入一个<code>js</code>文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的<code>json</code>数据作为参数传入。类似的还有使用图像Ping。实质上是通过DOM请求静态资源，不受同源限制。</p>
</li>
</ul>
<h3 id="More"><a href="#More" class="headerlink" title="More"></a>More</h3><p>这篇主要讲的是前端页面的通信，因为涉及跨域问题，所以也简单记录了Ajax的跨域。对于前后端的信息交互，可以参考：<a href="https://github.com/nimojs/blog/issues/13" target="_blank" rel="external">前后端数据交互</a></p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ITtech </tag>
            
            <tag> 数据交换 </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github+Hexo搭建个人博客及自定义]]></title>
      <url>https://chenluli.github.io/2016/09/19/blogLaunch/</url>
      <content type="html"><![CDATA[<p>简单地搭建博客的记录，以及一些个性化操作。<br><a id="more"></a></p>
<h2 id="Hexo-Get-Start"><a href="#Hexo-Get-Start" class="headerlink" title="Hexo Get Start"></a>Hexo Get Start</h2><h3 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h3><ol>
<li><p>命令行里执行:  <figure class="highlight plain"><figcaption><span>npm install -g hexo```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 初始化博客(若不设置folder，默认在当前文件夹建立网站):  </div><div class="line">   ```$ hexo init [folder]</div></pre></td></tr></table></figure></p>
<p>会自动生成source,thems,_config.yml。</p>
</li>
<li><p>按照提示运行 <code>$ npm install</code> 。 会观察到增加了node_modules目录。</p>
</li>
</ol>
<h3 id="The-First-article"><a href="#The-First-article" class="headerlink" title="The First article"></a>The First article</h3><ol>
<li><p>我们来创建博客的第一篇文章:命令<code>$ hexo new [post|page|draft] &quot;hello-world&quot;</code>会在<code>[folder]\source\_posts</code>下自动创建一个”hello-world.md”文件。 </p>
</li>
<li><p>发表草稿：<code>$ hexo publish &lt;filename&gt;</code> (草稿会存在<code>source\_drafts</code>文件夹中，该命令会将草稿移入<code>source\_posts</code>中。)</p>
</li>
<li><p>生成静态网页: <code>$hexo generate</code>。 生成的静态文件位于public文件夹下。  </p>
</li>
<li><p>启动本地server: <code>$ hexo server</code>。 启动后，访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>(4000为默认端口)可预览博客效果。<br>停止server: <kbd>Ctrl</kbd>+<kbd>C</kbd>   (<em>注 :hexo3中server模块独立出来了，要单独安装<code>$ npm install hexo-server --save</code></em>)</p>
<p><em>注： 若发现站点未发生改变，则可能需 <code>$ hexo clean</code> 清除生成的静态文件等，再重新generate</em> 。</p>
</li>
</ol>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p><em>注:</em> <em>需要先在github上创建个人的github page。</em></p>
<ol>
<li><p>安装hexo-deployer插件: <code>$ npm install hexo-deployer-git</code>  </p>
</li>
<li><p>修改站点配置文件<code>_config.yml</code>： 找到<code>deploy</code>,将其属性修改为：</p>
<figure class="highlight plain"><figcaption><span>git</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repository: https://github.com/[username]/[username].github.io.git</div><div class="line">branch: master```  </div><div class="line">*注: [username]为自己在github的用户名。*</div></pre></td></tr></table></figure>
</li>
<li><p>运行 <code>hexo deploy</code>  </p>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>参考：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo文档</a></p>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>我使用的是<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT主题</a></p>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>主题安装后，会出现在<code>themes</code>目录下。主题配置文件为<code>_config.yml</code>。可参考注释和官网进行配置。</p>
<h3 id="第三方服务集成"><a href="#第三方服务集成" class="headerlink" title="第三方服务集成"></a>第三方服务集成</h3><p>我集成了多说，google-analytics，不蒜子，sitemap。配置第三方库方法可以参考<a href="http://zhiho.github.io/2015/09/29/hexo-next/" target="_blank" rel="external">这篇博客</a>。</p>
<h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><h3 id="目录结构与渲染原理"><a href="#目录结构与渲染原理" class="headerlink" title="目录结构与渲染原理"></a>目录结构与渲染原理</h3><ul>
<li>站点的<code>scaffolds</code>目录下存着几种layout的模板，默认的layout有page,post,draft,可自定义。</li>
<li>站点的<code>public</code>下是generate后生成的页面，也可自己放上一些需要用的静态资源。</li>
<li>主题的<code>layout</code>下是以swig文件定义的布局及一些布局相关的逻辑。</li>
<li>主题的<code>source</code>下放有CSS，JS，font等控制显示和行为的代码。</li>
</ul>
<p>​      我们通过修改站点和主题的配置文件是在已有的样式和组件上进行选择。如果我们要自定义且覆盖其默认样式，可以修改css或js源码，但为了不破坏、易于管理等，最好不要直接修改源码，我们可以在<code>\themes\next\source\js\src</code>中定义自己的js文件，在layout的<code>_layout.swig</code>里引用。在<code>\themes\next\source\css\_custom</code>里定义样式表(支持stylus语法，也可用原生CSS)。从<code>main.styl</code>里可看到NexT主题是默认引用<code>custom.styl</code>的。</p>
<p>​     当想要修改某部分样式时，可以在浏览器中查看元素，然后在自定义文件中修改。</p>
<h3 id="What-I-have-done"><a href="#What-I-have-done" class="headerlink" title="What I have done"></a>What I have done</h3><p>这里我简单记录下该博客在样式上做的改变，也可给大家一个参考</p>
<ul>
<li><p>背景  </p>
<p>设置了昼/夜两套背景样式 。这个单纯因为自己喜欢昼与夜，日与月这样的概念，又爱折腾视觉效果。:-)  </p>
</li>
<li><p>侧边栏   </p>
<p>觉得之前的样式不够简约，白黑搭配有些违和，于是修改了一下。</p>
</li>
<li><p>主页   </p>
<p>我不太喜欢主页直接展示文章的形式，所以进行了修改。</p>
<p>（<em>未完待续…</em>）</p>
</li>
</ul>
<h2 id="好啦"><a href="#好啦" class="headerlink" title="好啦"></a>好啦</h2><p> 这样，就搞定了自己喜欢的样式，拥有了闪耀着自己的小趣味的Blog。接下来就是好好记录，脚踏实地的阶段啦，毕竟皮表再华丽也只是皮表，灵魂还是在于内容呀。</p>
]]></content>
      
        
        <tags>
            
            <tag> IT-tech </tag>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
